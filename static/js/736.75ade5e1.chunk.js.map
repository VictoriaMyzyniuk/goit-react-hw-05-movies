{"version":3,"file":"static/js/736.75ade5e1.chunk.js","mappings":"oRAEaA,EAAUC,EAAAA,EAAAA,IAAH,mFAMPC,EAAWD,EAAAA,EAAAA,GAAH,oGAMRE,EAAWF,EAAAA,EAAAA,GAAH,4LAURG,EAAiBH,EAAAA,EAAAA,IAAH,kIAQdI,EAAWJ,EAAAA,EAAAA,IAAH,sFAORK,EAAcL,EAAAA,EAAAA,IAAH,mG,SCwBxB,EAlDa,SAAAM,GACX,OAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAgDF,EAAAA,EAAAA,WAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA4BF,GAA5B,gGAE+BG,EAAAA,GAAiBH,GAFhD,OAEUI,EAFV,OAGIP,EAAYO,GACZL,GAAoB,GAJxB,gDAMIM,QAAQC,IAAI,KAAMC,SANtB,yDADc,yBAAC,SAAD,2BAUdC,CAAaR,EACd,GAAE,CAACA,IAEoB,IAApBJ,EAASa,QAAgBX,GACpB,SAACP,EAAD,kDAGP,SAACF,EAAD,UACGO,EAASc,KAAI,YAA4C,IAAzChB,EAAwC,EAAxCA,GAAIiB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACvC,OACE,UAACvB,EAAD,WACGqB,GACC,SAACxB,EAAD,CACE2B,IAAG,yCAAoCH,GACvCI,IAAKH,KAGP,SAACzB,EAAD,CACE2B,IAAG,uEACHC,IAAKH,KAGT,UAACnB,EAAD,YACE,SAACF,EAAD,UAAiBqB,KACjB,UAACrB,EAAD,yBAEE,SAACC,EAAD,UAAWqB,YAhBFnB,EAqBlB,KAGN,C,8LC5DKsB,EAAW,gCACXC,EAAM,mCAECC,EAAgB,mCAAG,oGACPC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFb,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qDAOhBC,EAAe,mCAAG,WAAMC,GAAN,uFACNL,EAAAA,GAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,4DACqEO,IAF/D,cACvBJ,EADuB,yBAKtBA,EAASC,KAAKC,SALQ,2CAAH,sDAQfG,EAAY,mCAAG,WAAM/B,GAAN,uFACHyB,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,oBACauB,EADb,kBADG,cACpBG,EADoB,yBAKnBA,EAASC,MALU,2CAAH,sDAQZK,EAAY,mCAAG,WAAMhC,GAAN,uFACHyB,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,4BACqBuB,EADrB,oBADG,cACpBG,EADoB,yBAKnBA,EAASC,KAAKM,MALK,2CAAH,sDAQZC,EAAe,mCAAG,WAAMlC,GAAN,uFACNyB,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,4BACqBuB,EADrB,2BADM,cACvBG,EADuB,yBAKtBA,EAASC,KAAKC,SALQ,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastImg = styled.img`\n  width: 130px;\n  height: 200px;\n  border-radius: 15px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 30px;\n`;\nexport const CastItem = styled.li`\n  width: 300px;\n  border: 2px solid pink;\n  display: flex;\n  /* align-items: center;\n  justify-content: center; */\n  padding: 15px;\n\n  border-radius: 15px;\n`;\nexport const CastInfoHeader = styled.div`\n  font-size: 15px;\n  font-weight: 700;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  color: #570434;\n`;\n\nexport const CastInfo = styled.div`\n  font-size: 15px;\n  font-weight: 500;\n\n  color: #b9518f;\n`;\n\nexport const CastWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n`;\n","import { useState, useEffect } from 'react';\nimport * as API from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastImg,\n  CastList,\n  CastItem,\n  CastInfoHeader,\n  CastInfo,\n  CastWrapper,\n} from 'components/Cast/Cast.styled';\nimport PropTypes from 'prop-types';\n\nconst Cast = id => {\n  const [castInfo, setCastInfo] = useState([]);\n  const [isCastInfoLoaded, setIsCastInfoLoaded] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function loadCastInfo(movieId) {\n      try {\n        const castResponse = await API.getMovieCast(movieId);\n        setCastInfo(castResponse);\n        setIsCastInfoLoaded(true);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    loadCastInfo(movieId);\n  }, [movieId]);\n\n  if (castInfo.length === 0 && isCastInfoLoaded) {\n    return <CastInfoHeader>No cast information for this movie</CastInfoHeader>;\n  }\n  return (\n    <CastList>\n      {castInfo.map(({ id, profile_path, name, character }) => {\n        return (\n          <CastItem key={id}>\n            {profile_path ? (\n              <CastImg\n                src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                alt={name}\n              />\n            ) : (\n              <CastImg\n                src={`https://upload.wikimedia.org/wikipedia/commons/6/6c/No_image_3x4.svg`}\n                alt={name}\n              />\n            )}\n            <CastWrapper>\n              <CastInfoHeader>{name}</CastInfoHeader>\n              <CastInfoHeader>\n                Character:\n                <CastInfo>{character}</CastInfo>\n              </CastInfoHeader>\n            </CastWrapper>\n          </CastItem>\n        );\n      })}\n    </CastList>\n  );\n};\nexport default Cast;\n\nCast.propTypes = {\n  castInfo: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd2c21f22a2d4ccc40e22a6b0b1329764';\n\nexport const getPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n  return response.data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY}&language=eng`\n  );\n\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n"],"names":["CastImg","styled","CastList","CastItem","CastInfoHeader","CastInfo","CastWrapper","id","useState","castInfo","setCastInfo","isCastInfoLoaded","setIsCastInfoLoaded","movieId","useParams","useEffect","API","castResponse","console","log","message","loadCastInfo","length","map","profile_path","name","character","src","alt","BASE_URL","KEY","getPopularMovies","axios","response","data","results","getMovieByQuery","query","getMovieById","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}